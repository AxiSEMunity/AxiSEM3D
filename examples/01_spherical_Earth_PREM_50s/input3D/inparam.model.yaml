#
#  inparam.model.yaml
#  AxiSEM3D
#
#  Created by Kuangdai Leng on 6/20/20.
#  Copyright © 2019 Kuangdai Leng. All rights reserved.
#

#  This is an AxiSEM3D input parameter file for
#  1D and 3D models


############################# 1D model #############################
# parameters for 1D model (the mesh)
model1D:
    # what: Exodus mesh file created by salvus mesher
    # type: filename
    exodus_mesh: global_mesh__prem_ani__50s.e


############################# geodesy #############################
# parameters for geodesy
geodesy:
    # what: geographic location of the north pole in the mesh
    # type: array of double / SOURCE
    # note: 1) this reference location enables the usage of geographic
    #          coordinates for locating sources, receivers and 3D models,
    #          compatible with Cartesian meshes
    #       2) array of double: [latitude, longitude]
    #       3) SOURCE: determined this location by the FIRST source
    #                  presented in list_of_sources in inparam.source.yaml;
    #                  always use SOURCE for a single-source simulation
    lat_lon_north_pole_mesh: SOURCE

    # what: flattening on the surface
    # type: string / double
    # only: SPHERE / WGS84 / GRS80 / SPECFEM3D_GLOBE / value
    # note: 1) ellipticity is ignored for a Cartesian mesh
    #       2) 0 for a perfect sphere; ~0.0033 for the Earth
    #       3) ellipticity will be used in the transformation between
    #          the geographic and the geocentric co-latitudes;
    #          see eq. (14.32) in Dahlen & Tromp, 1998
    #       4) to actually deform the entire mesh, add 3D model
    #          "Ellipticity" to list_of_3D_models
    flattening_on_surface: WGS84


######################## absorbing boundary ########################
# parameters for absorbing boundary condition
absorbing_boundary:
    # what: model boundaries regarded as absorbing boundaries
    # type: array of string
    # only: a subset of [RIGHT, BOTTOM, TOP]
    # note: 1) an AxiSEM3D mesh may contain four outer boundaries:
    #          left (axial), right, bottom and top (surface); the right,
    #          bottom and top ones can be absorbing boundaries (the left
    #          or axial one is non-physical)
    #       2) use [] to disable absorbing boundary condition
    #          (so that all model boundaries will be stress-free)
    #       3) the most common case in seismology is [RIGHT, BOTTOM]
    boundaries: [RIGHT, BOTTOM]
    
    # what: enable the Clayton-Enquist approach
    # type: bool
    # note: the simplest linear approach by Clayton & Engquist (1977)
    enable_Clayton_Enquist: true
    
    # the sponge approach by Kosloff & Kosloff (1986)
    Kosloff_Kosloff:
        # what: enable the Kosloff-Kosloff approach
        # type: bool
        # note: Clayton-Enquist and Kosloff-Kosloff can be used together,
        #       but one of them has to be enabled at least
        enable: true
        
        # what: relative spans of the sponge layers
        # type: array of double
        # note: 1) must be presented in the same order as absorbing_boundaries
        #       2) to use Kosloff-Kosloff, the mesh should be a little larger
        #          than the required computational domain; for example, given
        #          a required domain spans from 0 to 100 km in depth, one can
        #          generate a mesh from 0 to 110 km and set the relative span
        #          to 0.05, so the thickness of the sponge layer at the mesh
        #          bottom will be determined as 110 * 0.05 = 5.5 km, leaving
        #          an unaffected depth range from 0 to 104.5 km for normal
        #          wave propagation and analysis
        #       3) allowed range: .01 ~ 0.25
        relative_spans: [.05, .05]
        
        # what: expression of γ-factor in solid domain
        # type: math expression
        # note: 1) γ-factor represents the absorbing strength at a point
        #       2) allowed arguments include (case sensitive):
        #          - VP, VS: P- and S- wave velocities at the point
        #          - RHO   : density at the point
        #          - SPAN  : span of the sponge layer
        #          - T0    : mesh period
        #          * VP, VS and RHO are the 1D values in the Exodus mesh
        #       3) this expression will be further multiplied by a pattern
        #          function that equals to 1 on the outermost edge of the
        #          sponge layer (i.e., on the mesh boundary) and gradually
        #          decreases to 0 on the the innermost edge; such a decreasing
        #          pattern is automatically handled by the solver
        #       4) the default is an empirical expression from
        #          Haindl et al., 2020
        gamma_expr_solid: 1.1 / T0 * (VS / VP)^2 * exp(-0.04 * SPAN / (VP * T0))
        
        # what: expression of γ-factor in fluid domain
        # type: math expression
        # note: same as gamma_expr_solid but without VS dependency
        gamma_expr_fluid: 0.88 / T0 * exp(-0.04 * SPAN / (VP * T0))


######################## attenuation ########################
# what: attenuation mode
# type: string
# only: NONE / FULL / CG4
# note: 1) NONE: turn off attenuation
#       2) FULL: compute attenuation on all GLL points
#       3) CG4:  compute attenuation on 4 GLL points per element;
#                CG4 is mostly as accurate as FULL but more efficient
#                than FULL, see van Driel & Nissen-​Meyer, 2014;
#                CG4 requires set(NPOL 4) in CMakeLists.txt;
attenuation: CG4


############################# 3D models #############################
# what: list of 3D models
# type: array of objects
# note: 1) the order in this list can affect the final 3D model
#       2) use [] if no 3D model presents
list_of_3D_models:
    #==========================================================================#
    # this key can be arbitrary
    - EMC_S362ANI:
        # what: activate this model
        # type: bool
        activated: true
        # what: class name
        # type: string
        # note: current built-in classes include
        #       - StructuredGridV3D: volumetric 3D model on a structured grid
        #       - StructuredGridG3D: geometric 3D model on a structured grid
        #       - StructuredGridO3D: ocean-load 3D model on a structured grid
        #       - Ellipticity: deform the mesh with global ellipticity
        class_name: StructuredGridV3D
        # -------------------------------- #
        # parameters for StructuredGridV3D #
        # -------------------------------- #
        # what: NetCDF data file
        # type: filename
        nc_data_file: S362ANI_percent.nc
        # parameters for grid coordinates
        coordinates:
            # what: type of horizontal coordinates
            # type: string
            # only: DISTANCE_AZIMUTH / XY_CARTESIAN / LATITUDE_LONGITUDE
            horizontal: LATITUDE_LONGITUDE
            # what: type of vertical coordinate
            # type: string
            # only: RADIUS / DEPTH
            vertical: DEPTH
            # what: correct for ellipticity when locating the model
            # type: bool
            # note: used only when horizontal = LATITUDE_LONGITUDE
            ellipticity: false
            # what: use solid surface as depth origin
            # type: bool
            # note: used only when vertical = DEPTH
            depth_below_solid_surface: false
            # what: NetCDF variables for the coordinates
            # type: array of string
            nc_variables: [latitude, longitude, depth]
            # what: rank of the coordinates in data
            # type: array of int
            data_rank: [1, 2, 0]
            # what: length unit of the coordinates
            # type: string / value
            # only: km / m / number
            length_unit: km
            # what: angle unit of the coordinates
            # type: string
            # only: degree / radian
            angle_unit: degree
            # what: use undulated (otherwise reference) geometry to
            #       determine the vertical location
            # type: bool
            # note: compatible only with vertical = RADIUS
            undulated_geometry: false
            # what: check inplane model range for the whole element
            # type: bool
            # note: 1) if this parameter is set to true, the element center
            #          will be used to determine whether an element is located
            #          within the "inplane" model range
            #       2) if its center is in range, all its GLL points must be
            #          in range, or an exception will occur; users can extend
            #          the model range slightly to allow for numerical errors
            #       3) this parameter safely realizes inplane discontinuities
            whole_element_inplane: false
        # parameters for properties
        properties:
            - VP:
                # what: NetCDF variable
                nc_var: dvs
                # what: factor or unit
                factor: 0.005
                # what: reference kind
                # only: ABS / REF1D / REF3D / REF_PERTURB
                # note: For any property X:
                #       1) ABS: absolute value
                #          X_3D = value_in_file
                #       2) REF1D: perturbation w.r.t. the 1D reference model
                #          X_3D = (1 + value_in_file) * X_1D
                #       3) REF3D: perturbation w.r.t. the current 3D model
                #          X_3D = (1 + value_in_file) * X_3D
                #       4) REF_PERTURB => perturbation w.r.t. the current
                #                         perturbation or (X_3D - X_1D)
                #          X_3D = (1 + value_in_file) * (X_3D - X_1D) + X_1D
                reference_kind: REF1D
            - VS:
                # what: NetCDF variable
                nc_var: dvs
                # what: factor or unit
                factor: 0.01
                # what: reference kind
                # only: ABS / REF1D / REF3D / REF_PERTURB
                # note: For any property X:
                #       1) ABS: absolute value
                #          X_3D = value_in_file
                #       2) REF1D: perturbation w.r.t. the 1D reference model
                #          X_3D = (1 + value_in_file) * X_1D
                #       3) REF3D: perturbation w.r.t. the current 3D model
                #          X_3D = (1 + value_in_file) * X_3D
                #       4) REF_PERTURB => perturbation w.r.t. the current
                #                         perturbation or (X_3D - X_1D)
                #          X_3D = (1 + value_in_file) * (X_3D - X_1D) + X_1D
                reference_kind: REF1D
        # what: store grid data only on the leader processors
        # type: bool
        # note: turn this on if the model is large; set mpi:nproc_per_group
        #       in inparam.advanced.yaml to the number of processors per
        #       node to minimize memory usage
        store_grid_only_on_leaders: true
